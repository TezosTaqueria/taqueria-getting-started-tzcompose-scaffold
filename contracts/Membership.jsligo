namespace Member {
    export type storage = map<address, bool>;

    @entry
    const join = (_: unit, store: storage): [list<operation>, storage] => {
        // Check if 1 tez has been provided
        const amount = Tezos.get_amount();
        if (amount < 1tez) {
            failwith("Insufficient amount of tez");
        }

        // Get the sender address
        const sender = Tezos.get_sender();

        // Add the sender to the storage
        const updatedStore: map<address, bool> = Map.add(sender, true, store);

        return [list([]), updatedStore];
    }

    @entry
    const leave = (_:unit, store: storage): [list<operation>, storage] => {
        // Get the sender address
        const sender = Tezos.get_sender();

        // Add the sender to the storage
        const updatedStore  = Map.remove(sender, store);

        return [list([]), updatedStore];
    }

    @view
    const is_member = (addr: address, store: storage) => {
        // Check if the sender is a member
        return Map.find(addr, store);
    }
}


const test_join = () : unit => {
    let result = Test.originate(contract_of(Member), Map.empty, 0tez);
    let contract = Test.to_contract(result.addr);
    const status = Test.transfer_to_contract(contract, Join(unit), 1tez);
    const fromAddr = Test.nth_bootstrap_account(1);
    match(status) {
        when(Success(_)): do {
            assert(true);

            // Get expected and actual values for storage
            let expected: map<address, bool> = Map.empty;
            expected = Map.add(fromAddr, true, expected);
            const actual = Test.get_storage(result.addr);

            // Debug actual and expected values
            // Test.print(Test.to_json(expected));
            // Test.print("\n");
            // Test.print(Test.to_json(actual));
            // Test.print("\n");

            // Assert that expected storage is equal to the actual storage
            assert(Test.equal(expected, actual));
            
            // Assert that is_member view works as expected
            const addr = Test.to_address(result.addr);
            const viewResult: option<bool> = Tezos.call_view("is_member", Tezos.get_sender(), addr);
            match(viewResult) {
                when(Some(_)): assert(true);
                when(_): assert(false);
            }
        }
        when(_): assert(false);
    }
}

const test_leave = () : unit => {
    let result = Test.originate(contract_of(Member), Map.empty, 0tez);
    let contract = Test.to_contract(result.addr);
    Test.transfer_to_contract(contract, Join(unit), 0tez);
    const status = Test.transfer_to_contract(contract, Leave(unit), 0tez);
    match(status) {
        when(Success(_)): do {
            assert(true);
            const expected: map<address, bool> = Map.empty;
            const actual = Test.get_storage(result.addr);
            assert(Test.equal(expected, actual));
        }
        when(_): assert(false);
    }
}

const test_join_result = test_join()
const test_leave_result = test_leave()

